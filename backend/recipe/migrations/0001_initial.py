# Generated by Django 3.2.15 on 2022-09-29 08:41

import colorfield.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FavoriteRecipes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'избранное',
                'verbose_name_plural': 'много МНОГО избранных',
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название ингредиента.', max_length=200, verbose_name='название ингредиента')),
                ('measurement_unit', models.CharField(help_text='Единица измерения.', max_length=200, verbose_name='единица измерения')),
            ],
            options={
                'verbose_name': 'ингредиент',
                'verbose_name_plural': 'ингредиенты',
            },
        ),
        migrations.CreateModel(
            name='IngredientsAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(default=1, help_text='Количество.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='количество продукта')),
                ('ingredient', models.ForeignKey(help_text='Название ингредиента из рецепта.', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_for_recipe', to='recipe.ingredient', verbose_name='название ингредиента')),
            ],
            options={
                'verbose_name': 'ингредиент',
                'verbose_name_plural': 'ингредиенты',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название рецепта.', max_length=200, unique=True, verbose_name='название рецепта')),
                ('image', models.ImageField(help_text='Изображение: ммм нямка!', upload_to='recipes/', verbose_name='изображение: ммм нямка!')),
                ('text', models.TextField(help_text='Описание рецепта.', max_length=500, verbose_name='описание рецепта')),
                ('cooking_time', models.PositiveIntegerField(help_text='Время приготовления рецепта(мин).', validators=[django.core.validators.MinValueValidator(1, 'Время приготовления не может быть меньше чем 1 мин.')], verbose_name='время приготовления (в минутах)')),
                ('pub_date', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Дата публикации рецепта.', verbose_name='дата публикации')),
                ('author', models.ForeignKey(help_text='Автор рецепта.', on_delete=django.db.models.deletion.CASCADE, related_name='user_recipes', to=settings.AUTH_USER_MODEL, verbose_name='автор рецепта')),
                ('favorited_recipe', models.ManyToManyField(help_text='Рецепты в избранном.', related_name='favorited_recipes', through='recipe.FavoriteRecipes', to=settings.AUTH_USER_MODEL, verbose_name='рецепты в избранном')),
            ],
            options={
                'verbose_name': 'рецепт',
                'verbose_name_plural': 'рецепты',
                'ordering': ('-pub_date',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название.', max_length=200, unique=True, verbose_name='название тэга')),
                ('color', colorfield.fields.ColorField(default='#FFFFFF', help_text='Цвет тэга.', image_field=None, max_length=18, samples=(('R', '#FF0000'), ('O', '#FFA500'), ('Y', '#FFFF00'), ('G', '#008000'), ('C', '#00FFFF'), ('B', '#0000FF'), ('P', '#800080'), ('Bl', '#000000')), unique=True, verbose_name='цвет тэга')),
                ('slug', models.SlugField(help_text='Машинное имя.', max_length=200, unique=True, verbose_name='уникальный слаг')),
            ],
            options={
                'verbose_name': 'тэг',
                'verbose_name_plural': 'тэги',
            },
        ),
        migrations.CreateModel(
            name='ShopingCart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe', models.ForeignKey(help_text='Рецепт в корзине.', on_delete=django.db.models.deletion.CASCADE, related_name='shoping_cart', to='recipe.recipe', verbose_name='покупки')),
                ('user', models.ForeignKey(help_text='Владелец корзины.', on_delete=django.db.models.deletion.CASCADE, related_name='shoping_cart', to=settings.AUTH_USER_MODEL, verbose_name='покупатель')),
            ],
            options={
                'verbose_name': 'корзина для покупок',
                'verbose_name_plural': 'корзины для покупок',
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='in_shoping_cart',
            field=models.ManyToManyField(help_text='Рецепты в корзине.', related_name='shoping_recipes', through='recipe.ShopingCart', to=settings.AUTH_USER_MODEL, verbose_name='рецепты в корзине'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='ingredients',
            field=models.ManyToManyField(help_text='Ингредиенты рецепта.', related_name='recipes_with_ingredient', through='recipe.IngredientsAmount', to='recipe.Ingredient', verbose_name='ингредиенты'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(help_text='Тэги.', to='recipe.Tag', verbose_name='тэги'),
        ),
        migrations.AddField(
            model_name='ingredientsamount',
            name='recipe',
            field=models.ForeignKey(help_text='Название рецепта', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_for_recipe', to='recipe.recipe', verbose_name='название рецепта'),
        ),
        migrations.AddConstraint(
            model_name='ingredient',
            constraint=models.UniqueConstraint(fields=('name', 'measurement_unit'), name='ingredients_with_measurement_unit_unique_constraint'),
        ),
        migrations.AddField(
            model_name='favoriterecipes',
            name='recipe',
            field=models.ForeignKey(help_text='Рецепт в избранном.', on_delete=django.db.models.deletion.CASCADE, related_name='favorite_recipes', to='recipe.recipe', verbose_name='рецепт в избранном'),
        ),
        migrations.AddField(
            model_name='favoriterecipes',
            name='user',
            field=models.ForeignKey(help_text='Владелец избранного.', on_delete=django.db.models.deletion.CASCADE, related_name='favorite_recipes', to=settings.AUTH_USER_MODEL, verbose_name='пользователь'),
        ),
        migrations.AddConstraint(
            model_name='shopingcart',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='recipes_in_shopingcart_unique_constraint'),
        ),
        migrations.AddConstraint(
            model_name='recipe',
            constraint=models.CheckConstraint(check=models.Q(('cooking_time__gte', 1)), name='cooking_time_min_constraint'),
        ),
        migrations.AddConstraint(
            model_name='ingredientsamount',
            constraint=models.UniqueConstraint(fields=('ingredient', 'recipe'), name='ingredients_in_recipe_unique_constraint'),
        ),
        migrations.AddConstraint(
            model_name='ingredientsamount',
            constraint=models.CheckConstraint(check=models.Q(('amount__gte', 1)), name='amount_min_constraint'),
        ),
        migrations.AddConstraint(
            model_name='favoriterecipes',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='users_favorite_recipe_unique_constraint'),
        ),
    ]
